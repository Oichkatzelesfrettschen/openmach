#
# Copyright (c) 1994 The University of Utah and
# the Computer Systems Laboratory (CSL).  All rights reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
# IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
# ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# CSL requests users of this software to return to csl-dist@cs.utah.edu any
# improvements that they make and grant CSL redistribution rights.
#
#      Author: Bryan Ford, University of Utah CSL
#
ifndef _mach4_kernel_makerules_
_mach4_kernel_makerules_ = yes

#
## @file kernel/Makerules
## @brief Makefile fragment for building the generic (machine-independent) part of the Mach4 microkernel.
##
## This file is designed to be included by machine-dependent Makefiles.
## It sets up common definitions, specifies source directories for various kernel
## modules, and handles the generation of a version information file.
##

#
# This makefile is for the generic part of the microkernel,
# and is included by the corresponding machine-dependent makefile.
#

#
## @var DEFINES
## @brief Adds standard kernel compilation defines.
## `MACH_KERNEL` and `KERNEL` are common preprocessor symbols used to indicate
## that the code is being compiled as part of the kernel.
## These are noted as "Old defines that I hope to phase out".
DEFINES += -DMACH_KERNEL -DKERNEL

#
## @var SRCDIRS
## @brief Specifies the source code directories for generic kernel components.
## This variable appends paths relative to `$(GSRCDIR)` (Generic Source Directory)
## for various kernel subsystems like device management, IPC, core kernel,
## virtual memory (VM), DDB (kernel debugger), bogus (miscellaneous/test),
## and utility code. The `kernel` entry itself is noted as potentially problematic
## for include path resolution and overriding.
##
SRCDIRS += $(addprefix $(GSRCDIR)/,	\
		kernel/device		\
		kernel/ipc		\
		kernel/kern		\
		kernel/vm		\
		kernel/ddb		\
		kernel/bogus		\
		kernel/util		\
		kernel)

# I'm not sure what to do with `kernel';
# it's needed because #includes within kernel code have directory names.
# This may be good or bad.
# It may be good, because it sort of provides a separate file namespace.
# (But it doesn't really, because all object files go into one directory anyway.)
# It is bad in a way because files included like this can't be overridden easily
# by more-specific program sections.

#
## @var GEN_OBJFILES
## @brief Lists object files to be generated, including `version.o`.
##
## @var CLEAN_FILES
## @brief Lists files to be removed during the clean process, including `version.c`.
##
## @target version.c
## @brief Rule to generate `version.c`.
## This target creates a C source file containing a version string.
## The version string includes information from `$(GSRCDIR)/Version.log`
## and the current date. This `version.c` is then compiled into `version.o`.
##
GEN_OBJFILES += version.o
version.c: $(GSRCDIR)/Version.log
	echo >$@ \
	  "char version[] = \"Mach4 `head -1 $(GSRCDIR)/Version.log`, `date`\";"
CLEAN_FILES += version.c

#
# Include the makefile containing the generic rules.
# This likely brings in standard compilation rules, toolchain definitions, etc.
# from a more general Makerules file located at `$(GSRCDIR)/Makerules`.
#
include $(GSRCDIR)/Makerules

#
## @brief Dependencies for specific object files.
## These lines specify header file dependencies for `memory_object.o`
## and `mach_port.o`, ensuring they are rebuilt if the listed headers change.
##
memory_object.o: memory_object_user.h memory_object_default.h
mach_port.o: mach_interface.h mach_port_interface.h

endif
