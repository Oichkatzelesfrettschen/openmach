/* GENERATED STUB HEADER for mach_debug.defs by mig_bypass_advanced.py */
/**
 * @file mach_debug/mach_debug_user.h
 * @brief User-space interface for Mach debugging routines.
 *
 * This header file is generated by MIG (Mach Interface Generator) based on
 * `mach_debug.defs`. It declares user-callable C functions that act as client
 * stubs for invoking kernel debugging routines or routines in a debugging server.
 * These functions typically involve sending Mach messages to a target port
 * (e.g., host port, task port) to request debugging information or operations.
 *
 * The actual parameters for these functions are often more complex than what is
 * shown in these minimal declarations and would be detailed in the corresponding
 * `.defs` file or the server-side implementation. The comments like
 * "TODO: Add parsed arguments for..." indicate that this generated header
 * is a basic form and might require manual completion or be used in conjunction
 * with other generated files for full client-side marshalling.
 */
#ifndef _MACH_DEBUG_USER_H_
#define _MACH_DEBUG_USER_H_

#include <mach/mach_types.h> /* For kern_return_t, mach_port_t etc. */
#include <mach/message.h>    /* For mach_msg_header_t */
#include <mach/kern_return.h>
/* Included user-side headers from imported .defs files */
#include "mach_ipc_debug_user.h" /* From import mach_ipc_debug.h - likely contains ipc_info_*, hash_info_* types */
#include "mach_vm_debug_user.h" /* From import mach_vm_debug.h - likely contains vm_region_info_t, vm_object_info_t etc. */
#include "mach_kdb_user.h" /* From import mach_kdb.h - related to kernel debugger */
#include "std_types_user.h" /* From import mach/std_types.defs - user-space representation of standard types */
#include "mach_types_user.h" /* From import mach/mach_types.defs - user-space representation of Mach types */
#include "mach_debug_types_user.h" /* From import mach_debug/mach_debug_types.defs - user-space representation of mach_debug types like zone_name_array_t */

/**
 * @def MACH_DEBUG_MSG_ID_BASE
 * @brief Base message ID for the `mach_debug` subsystem.
 * RPC message IDs for routines in this subsystem are typically offsets from this base.
 */
#ifndef MACH_DEBUG_MSG_ID_BASE
#define MACH_DEBUG_MSG_ID_BASE 1000
#endif

/* Definitions of routines */

/**
 * @brief Retrieves information about kernel memory zones.
 * Corresponds to `host_zone_info` in `mach_debug.defs`.
 * @param target_port The host port to which the request is sent.
 * @param names (out) Pointer to an array of zone names.
 * @param namesCnt (in/out) On input, max size of `names` array; on output, actual number of names.
 * @param info (out) Pointer to an array of zone information structures.
 * @param infoCnt (in/out) On input, max size of `info` array; on output, actual number of info structs.
 * @return `KERN_SUCCESS` on success, or an error code.
 * @note The actual function signature in the generated C stub will include
 *       pointers for output parameters like `names` and `info`.
 * Original arguments from .defs: host: host_t; out names: zone_name_array_t, CountInOut, Dealloc; out info: zone_info_array_t, CountInOut, Dealloc
 */
extern kern_return_t host_zone_info(
    mach_port_t target_port
    /* TODO: Add parsed arguments for host_zone_info here:
     * , zone_name_array_t *names, mach_msg_type_number_t *namesCnt,
     * zone_info_array_t *info, mach_msg_type_number_t *infoCnt
     */
);
/** @brief Message ID for the `host_zone_info` RPC. */
#define MSG_ID_MACH_DEBUG_host_zone_info (MACH_DEBUG_MSG_ID_BASE + 0)

/**
 * @brief Retrieves the send rights count for a given port name in a task's IPC space.
 * Corresponds to `mach_port_get_srights` in `mach_debug.defs`.
 * @param target_port The task port (ipc_space_t) to query.
 * @param name The mach_port_name_t (integer name) of the port within the task's space.
 * @param srights (out) Pointer to store the count of send rights.
 * @return `KERN_SUCCESS` on success, or an error code.
 * Original arguments from .defs: task: ipc_space_t; name: mach_port_name_t; out srights: mach_port_rights_t
 */
extern kern_return_t mach_port_get_srights(
    mach_port_t target_port
    /* TODO: Add parsed arguments for mach_port_get_srights here:
     * , mach_port_name_t name, mach_port_rights_t *srights
     */
);
/** @brief Message ID for the `mach_port_get_srights` RPC. */
#define MSG_ID_MACH_DEBUG_mach_port_get_srights (MACH_DEBUG_MSG_ID_BASE + 1)

/**
 * @brief Retrieves statistics about the kernel's IPC port hash table.
 * Corresponds to `host_ipc_hash_info` in `mach_debug.defs`.
 * @param target_port The host port.
 * @param info (out) Pointer to an array of hash bucket information.
 * @param infoCnt (in/out) Max size/actual count of `info` array.
 * @return `KERN_SUCCESS` on success.
 * Original arguments from .defs: host: host_t; out info: hash_info_bucket_array_t, CountInOut, Dealloc
 */
extern kern_return_t host_ipc_hash_info(
    mach_port_t target_port
    /* TODO: Add parsed arguments for host_ipc_hash_info here:
     * , hash_info_bucket_array_t *info, mach_msg_type_number_t *infoCnt
     */
);
/** @brief Message ID for the `host_ipc_hash_info` RPC. */
#define MSG_ID_MACH_DEBUG_host_ipc_hash_info (MACH_DEBUG_MSG_ID_BASE + 2)

/**
 * @brief Retrieves information about message-accepted requests in the IPC system.
 * Corresponds to `host_ipc_marequest_info` in `mach_debug.defs`.
 * @param target_port The host port.
 * @param max_requests (out) Pointer to store maximum number of requests.
 * @param info (out) Pointer to an array of hash bucket information for request tracking.
 * @param infoCnt (in/out) Max size/actual count of `info` array.
 * @return `KERN_SUCCESS` on success.
 * Original arguments from .defs: host: host_t; out max_requests: unsigned; out info: hash_info_bucket_array_t, CountInOut, Dealloc
 */
extern kern_return_t host_ipc_marequest_info(
    mach_port_t target_port
    /* TODO: Add parsed arguments for host_ipc_marequest_info here:
     * , unsigned *max_requests,
     * hash_info_bucket_array_t *info, mach_msg_type_number_t *infoCnt
     */
);
/** @brief Message ID for the `host_ipc_marequest_info` RPC. */
#define MSG_ID_MACH_DEBUG_host_ipc_marequest_info (MACH_DEBUG_MSG_ID_BASE + 3)

/**
 * @brief Retrieves detailed information about a task's IPC space.
 * Corresponds to `mach_port_space_info` in `mach_debug.defs`.
 * @param target_port The task port (ipc_space_t) to query.
 * @param info (out) Pointer to store `ipc_info_space_t` structure.
 * @param table_info (out) Pointer to an array of port name entries.
 * @param table_infoCnt (in/out) Max size/actual count.
 * @param tree_info (out) Pointer to an array of splay tree port name entries.
 * @param tree_infoCnt (in/out) Max size/actual count.
 * @return `KERN_SUCCESS` on success.
 * Original arguments from .defs: task: ipc_space_t; out info: ipc_info_space_t; out table_info: ipc_info_name_array_t, CountInOut, Dealloc; out tree_info: ipc_info_tree_name_array_t, CountInOut, Dealloc
 */
extern kern_return_t mach_port_space_info(
    mach_port_t target_port
    /* TODO: Add parsed arguments for mach_port_space_info here:
     * , ipc_info_space_t *info,
     * ipc_info_name_array_t *table_info, mach_msg_type_number_t *table_infoCnt,
     * ipc_info_tree_name_array_t *tree_info, mach_msg_type_number_t *tree_infoCnt
     */
);
/** @brief Message ID for the `mach_port_space_info` RPC. */
#define MSG_ID_MACH_DEBUG_mach_port_space_info (MACH_DEBUG_MSG_ID_BASE + 4)

/**
 * @brief Retrieves information about dead-name notification requests for a port name.
 * Corresponds to `mach_port_dnrequest_info` in `mach_debug.defs`.
 * @param target_port The task port (ipc_space_t).
 * @param name The port name to query.
 * @param total (out) Total size of the dead-name request table/structure.
 * @param used (out) Number of used entries.
 * @return `KERN_SUCCESS` on success.
 * Original arguments from .defs: task: ipc_space_t; name: mach_port_name_t; out total: unsigned; out used: unsigned
 */
extern kern_return_t mach_port_dnrequest_info(
    mach_port_t target_port
    /* TODO: Add parsed arguments for mach_port_dnrequest_info here:
     * , mach_port_name_t name, unsigned *total, unsigned *used
     */
);
/** @brief Message ID for the `mach_port_dnrequest_info` RPC. */
#define MSG_ID_MACH_DEBUG_mach_port_dnrequest_info (MACH_DEBUG_MSG_ID_BASE + 5)

/**
 * @brief Retrieves kernel stack usage statistics for the host.
 * Corresponds to `host_stack_usage` in `mach_debug.defs`.
 * @param target_port The host port.
 * @param reserved (out) Reserved stack space.
 * @param total (out) Total number of kernel stacks.
 * @param space (out) Total space allocated for kernel stacks.
 * @param resident (out) Resident space for kernel stacks.
 * @param maxusage (out) Maximum stack usage observed.
 * @param maxstack (out) Address of the stack with maximum usage.
 * @return `KERN_SUCCESS` on success.
 * Original arguments from .defs: host: host_t; out reserved: vm_size_t; out total: unsigned; out space: vm_size_t; out resident: vm_size_t; out maxusage: vm_size_t; out maxstack: vm_offset_t
 */
extern kern_return_t host_stack_usage(
    mach_port_t target_port
    /* TODO: Add parsed arguments for host_stack_usage here:
     * , vm_size_t *reserved, unsigned *total, vm_size_t *space,
     * vm_size_t *resident, vm_size_t *maxusage, vm_offset_t *maxstack
     */
);
/** @brief Message ID for the `host_stack_usage` RPC. */
#define MSG_ID_MACH_DEBUG_host_stack_usage (MACH_DEBUG_MSG_ID_BASE + 6)

/**
 * @brief Retrieves kernel stack usage statistics for a processor set.
 * Corresponds to `processor_set_stack_usage` in `mach_debug.defs`.
 * @param target_port The processor set name port.
 * @param total (out) Total number of kernel stacks.
 * @param space (out) Total space allocated.
 * @param resident (out) Resident space.
 * @param maxusage (out) Maximum usage.
 * @param maxstack (out) Address of stack with maximum usage.
 * @return `KERN_SUCCESS` on success.
 * Original arguments from .defs: pset: processor_set_name_t; out total: unsigned; out space: vm_size_t; out resident: vm_size_t; out maxusage: vm_size_t; out maxstack: vm_offset_t
 */
extern kern_return_t processor_set_stack_usage(
    mach_port_t target_port
    /* TODO: Add parsed arguments for processor_set_stack_usage here:
     * , unsigned *total, vm_size_t *space,
     * vm_size_t *resident, vm_size_t *maxusage, vm_offset_t *maxstack
     */
);
/** @brief Message ID for the `processor_set_stack_usage` RPC. */
#define MSG_ID_MACH_DEBUG_processor_set_stack_usage (MACH_DEBUG_MSG_ID_BASE + 7)

/**
 * @brief Retrieves information about the kernel's virtual-to-physical address translation table.
 * Corresponds to `host_virtual_physical_table_info` in `mach_debug.defs`.
 * @param target_port The host port.
 * @param info (out) Pointer to an array of hash bucket information for the VP table.
 * @param infoCnt (in/out) Max size/actual count.
 * @return `KERN_SUCCESS` on success.
 * Original arguments from .defs: host: host_t; out info: hash_info_bucket_array_t, CountInOut, Dealloc
 */
extern kern_return_t host_virtual_physical_table_info(
    mach_port_t target_port
    /* TODO: Add parsed arguments for host_virtual_physical_table_info here:
     * , hash_info_bucket_array_t *info, mach_msg_type_number_t *infoCnt
     */
);
/** @brief Message ID for the `host_virtual_physical_table_info` RPC. */
#define MSG_ID_MACH_DEBUG_host_virtual_physical_table_info (MACH_DEBUG_MSG_ID_BASE + 8)

/**
 * @brief Loads a symbol table into the kernel for a specified task.
 * Corresponds to `host_load_symbol_table` in `mach_debug.defs`.
 * @param target_port The host privilege port.
 * @param task The target task for which the symbol table is loaded.
 * @param name Name of the symbol table (e.g., executable path).
 * @param symtab Pointer to the symbol table data in user space.
 * @param symtabCnt Size of the symbol table data. (Implicit from pointer_t usually)
 * @return `KERN_SUCCESS` on success.
 * Original arguments from .defs: host: host_priv_t; task: task_t; name: symtab_name_t; symtab: pointer_t, Count=??
 */
extern kern_return_t host_load_symbol_table(
    mach_port_t target_port
    /* TODO: Add parsed arguments for host_load_symbol_table here:
     * , task_t task, symtab_name_t name, pointer_t symtab, mach_msg_type_number_t symtabCnt
     */
);
/** @brief Message ID for the `host_load_symbol_table` RPC. */
#define MSG_ID_MACH_DEBUG_host_load_symbol_table (MACH_DEBUG_MSG_ID_BASE + 9)

/**
 * @brief For a given port name in a task's IPC space, retrieves the type and kernel address of the underlying kernel object.
 * Corresponds to `mach_port_kernel_object` in `mach_debug.defs`.
 * @param target_port The task port (ipc_space_t).
 * @param name The port name to query.
 * @param object_type (out) Pointer to store the type of the kernel object (see `IPC_INFO_TYPE_*` in `ipc_info.h`).
 * @param object_addr (out) Pointer to store the kernel address of the object.
 * @return `KERN_SUCCESS` on success.
 * Original arguments from .defs: task: ipc_space_t; name: mach_port_name_t; out object_type: unsigned; out object_addr: vm_offset_t
 */
extern kern_return_t mach_port_kernel_object(
    mach_port_t target_port
    /* TODO: Add parsed arguments for mach_port_kernel_object here:
     * , mach_port_name_t name, unsigned *object_type, vm_offset_t *object_addr
     */
);
/** @brief Message ID for the `mach_port_kernel_object` RPC. */
#define MSG_ID_MACH_DEBUG_mach_port_kernel_object (MACH_DEBUG_MSG_ID_BASE + 10)

/**
 * @brief Retrieves information about a specific virtual memory region in a task.
 * Corresponds to `mach_vm_region_info` in `mach_debug.defs`.
 * @param target_port The task port (vm_task_t).
 * @param address The address within the region to query.
 * @param region (out) Pointer to store `vm_region_info_t` structure.
 * @param object (out) Pointer to store the memory object name port associated with the region.
 * @return `KERN_SUCCESS` on success.
 * Original arguments from .defs: task: vm_task_t; address: vm_address_t; out region: vm_region_info_t; out object: memory_object_name_t = MACH_MSG_TYPE_MOVE_SEND ctype: mach_port_t
 */
extern kern_return_t mach_vm_region_info(
    mach_port_t target_port
    /* TODO: Add parsed arguments for mach_vm_region_info here:
     * , vm_address_t address, vm_region_info_t *region, mach_port_t *object
     */
);
/** @brief Message ID for the `mach_vm_region_info` RPC. */
#define MSG_ID_MACH_DEBUG_mach_vm_region_info (MACH_DEBUG_MSG_ID_BASE + 11)

/**
 * @brief Retrieves information about a VM object.
 * Corresponds to `mach_vm_object_info` in `mach_debug.defs`.
 * @param target_port The memory object name port.
 * @param info (out) Pointer to store `vm_object_info_t` structure.
 * @param shadow (out) Pointer to store the shadow object's name port (if any).
 * @param copy (out) Pointer to store the copy object's name port (if any).
 * @return `KERN_SUCCESS` on success.
 * Original arguments from .defs: object: memory_object_name_t; out info: vm_object_info_t; out shadow: memory_object_name_t = MACH_MSG_TYPE_MOVE_SEND ctype: mach_port_t; out copy: memory_object_name_t = MACH_MSG_TYPE_MOVE_SEND ctype: mach_port_t
 */
extern kern_return_t mach_vm_object_info(
    mach_port_t target_port
    /* TODO: Add parsed arguments for mach_vm_object_info here:
     * , vm_object_info_t *info, mach_port_t *shadow, mach_port_t *copy
     */
);
/** @brief Message ID for the `mach_vm_object_info` RPC. */
#define MSG_ID_MACH_DEBUG_mach_vm_object_info (MACH_DEBUG_MSG_ID_BASE + 12)

/**
 * @brief Retrieves information about the pages within a VM object.
 * Corresponds to `mach_vm_object_pages` in `mach_debug.defs`.
 * @param target_port The memory object name port.
 * @param pages (out) Pointer to an array of `vm_page_info_t` structures.
 * @param pagesCnt (in/out) Max size/actual count of `pages` array.
 * @return `KERN_SUCCESS` on success.
 * Original arguments from .defs: object: memory_object_name_t; out pages: vm_page_info_array_t, CountInOut, Dealloc
 */
extern kern_return_t mach_vm_object_pages(
    mach_port_t target_port
    /* TODO: Add parsed arguments for mach_vm_object_pages here:
     * , vm_page_info_array_t *pages, mach_msg_type_number_t *pagesCnt
     */
);
/** @brief Message ID for the `mach_vm_object_pages` RPC. */
#define MSG_ID_MACH_DEBUG_mach_vm_object_pages (MACH_DEBUG_MSG_ID_BASE + 13)

#endif /* _MACH_DEBUG_USER_H_ */
