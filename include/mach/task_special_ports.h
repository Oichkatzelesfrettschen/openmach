/* 
 * Mach Operating System
 * Copyright (c) 1991,1990,1989,1988,1987 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
/*
 *	File:	mach/task_special_ports.h
 *
 *	Defines codes for special_purpose task ports.  These are NOT
 *	port identifiers - they are only used for the task_get_special_port
 *	and task_set_special_port routines.
 *	
 */
/**
 * @file mach/task_special_ports.h
 * @brief Defines identifiers for task special ports.
 *
 * This file contains integer constants that serve as identifiers for
 * a task's special, well-known ports. These identifiers are used with
 * the `task_get_special_port` and `task_set_special_port` Mach system calls
 * to retrieve or modify these ports for a given task. These special ports
 * provide fundamental communication channels for task control, exception handling,
 * and bootstrapping.
 */

#ifndef	_MACH_TASK_SPECIAL_PORTS_H_
#define _MACH_TASK_SPECIAL_PORTS_H_

#ifdef	MACH_KERNEL
#include <mach_ipc_compat.h> /* For MACH_IPC_COMPAT */
#endif	/* MACH_KERNEL */

/**
 * @name Task Special Port Identifiers
 * These are integer codes, not actual port names, used as selectors in
 * `task_get_special_port` and `task_set_special_port`.
 * @{
 */

/**
 * @def TASK_KERNEL_PORT
 * @brief Identifier for the task's kernel port.
 * This port represents the task itself to the kernel and is used for most
 * task-level operations (e.g., `vm_allocate`, `thread_create`).
 * It is often referred to as the "task self" port.
 */
#define TASK_KERNEL_PORT	1

/**
 * @def TASK_EXCEPTION_PORT
 * @brief Identifier for the task's exception port.
 * Mach exception messages generated by this task (e.g., due to bad memory
 * access or arithmetic errors) are sent to this port.
 * A debugger or error handler would typically hold the receive right for this port.
 */
#define TASK_EXCEPTION_PORT	3

/**
 * @def TASK_BOOTSTRAP_PORT
 * @brief Identifier for the task's bootstrap port.
 * This port provides a task with its initial context or environment, often
 * set by the parent task or a name server. It's used to find other system services.
 */
#define TASK_BOOTSTRAP_PORT	4
/** @} */

/**
 * @name Convenience Macros for Task Special Ports
 * These macros simplify the calls to `task_get_special_port` and
 * `task_set_special_port` for specific special ports.
 * The underlying `task_get_special_port(task_t task, int which_port, mach_port_t *special_port)`
 * and `task_set_special_port(task_t task, int which_port, mach_port_t special_port)`
 * functions are assumed to be declared elsewhere (e.g., in `mach/mach_interface.h`).
 * @{
 */

/**
 * @brief Gets the kernel port for the specified task.
 * @param task The target task.
 * @param port Output: Pointer to store the retrieved kernel port.
 * @return Result of the underlying `task_get_special_port` call.
 */
#define task_get_kernel_port(task, port)	\
		(task_get_special_port((task), TASK_KERNEL_PORT, (port)))

/**
 * @brief Sets the kernel port for the specified task.
 * @note Modifying a task's kernel port is a highly privileged operation
 *       and generally not done by user-level tasks for their own kernel port.
 * @param task The target task.
 * @param port The port to set as the kernel port.
 * @return Result of the underlying `task_set_special_port` call.
 */
#define task_set_kernel_port(task, port)	\
		(task_set_special_port((task), TASK_KERNEL_PORT, (port)))

/**
 * @brief Gets the exception port for the specified task.
 * @param task The target task.
 * @param port Output: Pointer to store the retrieved exception port.
 * @return Result of the underlying `task_get_special_port` call.
 */
#define task_get_exception_port(task, port)	\
		(task_get_special_port((task), TASK_EXCEPTION_PORT, (port)))

/**
 * @brief Sets the exception port for the specified task.
 * @param task The target task.
 * @param port The port to set as the exception port.
 * @return Result of the underlying `task_set_special_port` call.
 */
#define task_set_exception_port(task, port)	\
		(task_set_special_port((task), TASK_EXCEPTION_PORT, (port)))

/**
 * @brief Gets the bootstrap port for the specified task.
 * @param task The target task.
 * @param port Output: Pointer to store the retrieved bootstrap port.
 * @return Result of the underlying `task_get_special_port` call.
 */
#define task_get_bootstrap_port(task, port)	\
		(task_get_special_port((task), TASK_BOOTSTRAP_PORT, (port)))

/**
 * @brief Sets the bootstrap port for the specified task.
 * @param task The target task.
 * @param port The port to set as the bootstrap port.
 * @return Result of the underlying `task_set_special_port` call.
 */
#define task_set_bootstrap_port(task, port)	\
		(task_set_special_port((task), TASK_BOOTSTRAP_PORT, (port)))
/** @} */


/** @name Legacy Mach IPC Compatibility
 * @{
 */
#if	MACH_IPC_COMPAT

/**
 * @def TASK_NOTIFY_PORT
 * @brief Identifier for the task's notification port (legacy IPC).
 * In older Mach versions, kernel IPC notifications (e.g., port death)
 * were sent to this port. Modern Mach uses a more general notification mechanism.
 * @deprecated
 */
#define TASK_NOTIFY_PORT	2

/**
 * @brief Gets the legacy notification port for the specified task.
 * @param task The target task.
 * @param port Output: Pointer to store the retrieved notification port.
 * @return Result of the underlying `task_get_special_port` call.
 * @deprecated
 */
#define task_get_notify_port(task, port)	\
		(task_get_special_port((task), TASK_NOTIFY_PORT, (port)))

/**
 * @brief Sets the legacy notification port for the specified task.
 * @param task The target task.
 * @param port The port to set as the notification port.
 * @return Result of the underlying `task_set_special_port` call.
 * @deprecated
 */
#define task_set_notify_port(task, port)	\
		(task_set_special_port((task), TASK_NOTIFY_PORT, (port)))

#endif	/* MACH_IPC_COMPAT */
/** @} */

#endif	/* _MACH_TASK_SPECIAL_PORTS_H_ */
