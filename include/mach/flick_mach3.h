/* 
 * Copyright (c) 1995 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 *
 *      Author: Bryan Ford, University of Utah CSL
 */
/*
 * Glue for the Flick's Mach 3 backend.  (Flick := Flexible IDL Compiler Kit.)
 * This file is included from every header file generated by that backend.
 * It provides standard MOM types and routines.
 */
/**
 * @file mach/flick_mach3.h
 * @brief Glue for Flick's Mach 3 backend (Flexible IDL Compiler Kit).
 *
 * This file is included from every header file generated by the Flick Mach 3 backend.
 * It provides standard MOM (Mach Object Model, presumably) types and potentially routines
 * used by the generated code for object management and communication.
 */
#ifndef _MACH_FLICK_MACH3MIG_H_
#define _MACH_FLICK_MACH3MIG_H_

#include <mach/boolean.h>
#include <mach/port.h>
#include <mach/message.h>
/* Note: mom_refcount_t, unsigned8_t, unsigned16_t, unsigned32_t,
 * signed8_t, signed16_t, signed32_t are assumed to be defined elsewhere,
 * likely through standard system headers or other Mach headers.
 */

/** @name MOM Basic Types */
/**@{*/
typedef char		mom_char8_t;		/**< MOM 8-bit character type. */
typedef unsigned8_t	mom_unsigned8_t;	/**< MOM 8-bit unsigned integer type. */
typedef unsigned16_t	mom_unsigned16_t;	/**< MOM 16-bit unsigned integer type. */
typedef unsigned32_t	mom_unsigned32_t;	/**< MOM 32-bit unsigned integer type. */
typedef signed8_t	mom_signed8_t;		/**< MOM 8-bit signed integer type. */
typedef signed16_t	mom_signed16_t;		/**< MOM 16-bit signed integer type. */
typedef signed32_t	mom_signed32_t;		/**< MOM 32-bit signed integer type. */

typedef int mom_key_t;			/**< MOM key type, likely for associations or lookups. */
/**@}*/

/**
 * @struct mom_ref
 * @brief Represents a reference to a Mach object.
 *
 * This structure likely handles reference counting and port management
 * for objects in the Flick Mach 3 environment. It also supports
 * canonicalization through a hash table and allows associating arbitrary
 * data with the reference.
 */
struct mom_ref
{
	mom_refcount_t	count;		///< Reference count for the object.
	mach_port_t	port;		///< Mach port representing the object or a capability to it.

	/** Chain on mom_ref hash table, for canonicalization. */
	struct mom_ref	*hash_next;

	/** Array of associations for this reference. */
	int assoc_count;		///< Number of associated data items.
	void *assoc[0];			///< Flexible array member for associated data pointers.
};
typedef struct mom_ref *mom_ref_t;	/**< Pointer to a mom_ref structure. */

/**
 * @struct mom_obj
 * @brief Represents a Mach object instance.
 *
 * This structure holds a handle to the actual object implementation
 * and a list of Mach ports associated with it.
 */
struct mom_obj
{
	void *handle;			///< Opaque handle to the object's implementation data.

	int port_count;			///< Number of Mach ports associated with this object.
	mach_port_t port[0];		///< Flexible array member for associated Mach ports.
};
typedef struct mom_obj *mom_obj_t;	/**< Pointer to a mom_obj structure. */

/** @name MOM Label Definitions */
/**@{*/
#define MOM__LABEL_BITS 8		/**< Number of bits used for labels in the MOM system. */
#define MOM__MAX_LABELS	(1 << MOM__LABEL_BITS) /**< Maximum number of distinct labels. */

/**
 * @brief Gets the number of bits used for labels.
 * @return The number of label bits (MOM__LABEL_BITS).
 */
#define mom_get_label_bits() MOM__LABEL_BITS
/**@}*/


#endif /* _MACH_FLICK_MACH3MIG_H_ */
