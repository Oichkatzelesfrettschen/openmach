/* 
 * Mach Operating System
 * Copyright (c) 1991,1990,1989,1988,1987 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
/*
 *	File:	mach/thread_special_ports.h
 *
 *	Defines codes for special_purpose thread ports.  These are NOT
 *	port identifiers - they are only used for the thread_get_special_port
 *	and thread_set_special_port routines.
 *	
 */
/**
 * @file mach/thread_special_ports.h
 * @brief Defines identifiers for thread special ports.
 *
 * This file contains integer constants that serve as identifiers for
 * a thread's special, well-known ports. These identifiers are used with
 * the `thread_get_special_port` and `thread_set_special_port` Mach system calls
 * to retrieve or modify these ports for a given thread. These special ports
 * provide communication channels for thread control and exception handling.
 */

#ifndef	_MACH_THREAD_SPECIAL_PORTS_H_
#define _MACH_THREAD_SPECIAL_PORTS_H_

#ifdef	MACH_KERNEL
#include <mach_ipc_compat.h> /* For MACH_IPC_COMPAT */
#endif	/* MACH_KERNEL */

/**
 * @name Thread Special Port Identifiers
 * These are integer codes, not actual port names, used as selectors in
 * `thread_get_special_port` and `thread_set_special_port`.
 * @{
 */

/**
 * @def THREAD_KERNEL_PORT
 * @brief Identifier for the thread's kernel port.
 * This port represents the thread itself to the kernel and is used for
 * thread-level operations (e.g., `thread_suspend`, `thread_terminate`).
 * It is often referred to as the "thread self" port.
 */
#define THREAD_KERNEL_PORT	1

/**
 * @def THREAD_EXCEPTION_PORT
 * @brief Identifier for the thread's exception port.
 * Mach exception messages generated by this thread (e.g., due to bad memory
 * access or arithmetic errors) are sent to this port by default, unless
 * a task-level exception port is handling them or the exception is otherwise caught.
 */
#define THREAD_EXCEPTION_PORT	3
/** @} */

/**
 * @name Convenience Macros for Thread Special Ports
 * These macros simplify the calls to `thread_get_special_port` and
 * `thread_set_special_port` for specific special ports.
 * The underlying `thread_get_special_port(thread_t thread, int which_port, mach_port_t *special_port)`
 * and `thread_set_special_port(thread_t thread, int which_port, mach_port_t special_port)`
 * functions are assumed to be declared elsewhere (e.g., in `mach/mach_interface.h`).
 * @{
 */

/**
 * @brief Gets the kernel port for the specified thread.
 * @param thread The target thread.
 * @param port Output: Pointer to store the retrieved kernel port.
 * @return Result of the underlying `thread_get_special_port` call.
 */
#define thread_get_kernel_port(thread, port)	\
		(thread_get_special_port((thread), THREAD_KERNEL_PORT, (port)))

/**
 * @brief Sets the kernel port for the specified thread.
 * @note Modifying a thread's kernel port is a highly privileged operation.
 * @param thread The target thread.
 * @param port The port to set as the kernel port.
 * @return Result of the underlying `thread_set_special_port` call.
 */
#define thread_set_kernel_port(thread, port)	\
		(thread_set_special_port((thread), THREAD_KERNEL_PORT, (port)))

/**
 * @brief Gets the exception port for the specified thread.
 * @param thread The target thread.
 * @param port Output: Pointer to store the retrieved exception port.
 * @return Result of the underlying `thread_get_special_port` call.
 */
#define thread_get_exception_port(thread, port)	\
		(thread_get_special_port((thread), THREAD_EXCEPTION_PORT, (port)))

/**
 * @brief Sets the exception port for the specified thread.
 * @param thread The target thread.
 * @param port The port to set as the exception port.
 * @return Result of the underlying `thread_set_special_port` call.
 */
#define thread_set_exception_port(thread, port)	\
		(thread_set_special_port((thread), THREAD_EXCEPTION_PORT, (port)))
/** @} */


/** @name Legacy Mach IPC Compatibility
 * @{
 */
#if	MACH_IPC_COMPAT

/**
 * @def THREAD_REPLY_PORT
 * @brief Identifier for the thread's default reply port (legacy IPC).
 * In older Mach versions, each thread had a default reply port for its own use,
 * often retrieved by `thread_reply()`.
 * @deprecated Modern Mach IPC uses `mach_reply_port()` or per-message reply ports.
 */
#define THREAD_REPLY_PORT	2

/**
 * @brief Gets the legacy reply port for the specified thread.
 * @param thread The target thread.
 * @param port Output: Pointer to store the retrieved reply port.
 * @return Result of the underlying `thread_get_special_port` call.
 * @deprecated
 */
#define thread_get_reply_port(thread, port)	\
		(thread_get_special_port((thread), THREAD_REPLY_PORT, (port)))

/**
 * @brief Sets the legacy reply port for the specified thread.
 * @param thread The target thread.
 * @param port The port to set as the reply port.
 * @return Result of the underlying `thread_set_special_port` call.
 * @deprecated
 */
#define thread_set_reply_port(thread, port)	\
		(thread_set_special_port((thread), THREAD_REPLY_PORT, (port)))

#endif	/* MACH_IPC_COMPAT */
/** @} */

#endif	/* _MACH_THREAD_SPECIAL_PORTS_H_ */
