#!/bin/bash
# Emergency MIG bypass - generates minimal functional stubs
DEFS_FILE=$1
# Ensure BASE_NAME doesn't include path, only the filename part
DEFS_FILENAME=$(basename "$DEFS_FILE")
BASE_NAME=${DEFS_FILENAME%.defs}

# Output directory should ideally be the same as where the .defs file is,
# or where the makefile expects the output. For now, create in current dir.
# Makefiles will typically call this script with appropriate output paths.
# For robustness, let's make sure we output to the path of the DEFS_FILE,
# replacing .defs with _user.c or _server.c
OUTPUT_DIR=$(dirname "$DEFS_FILE")

USER_C_FILE="${OUTPUT_DIR}/${BASE_NAME}_user.c"
SERVER_C_FILE="${OUTPUT_DIR}/${BASE_NAME}_server.c"
# MIG also often generates a .h file, e.g., ${BASE_NAME}.h
# For a minimal stub, we might not need it, or it might be empty.
# Let's add a minimal header stub as well.
HEADER_FILE="${OUTPUT_DIR}/${BASE_NAME}.h"

echo "Generating stubs for $DEFS_FILENAME -> ${BASE_NAME}_user.c, ${BASE_NAME}_server.c, ${BASE_NAME}.h in $OUTPUT_DIR"

cat > "${USER_C_FILE}" << STUB_USER
/* Minimal user stub for ${BASE_NAME} generated by mig_stub_generator.sh */
#include <mach/kern_return.h>
#include <mach/mach_types.h> /* Ensure mach_port_t and other types are defined */
#include <mach/message.h>   /* For mach_msg_header_t */
#include <mach/notify.h>    /* For notification_port_t if used in complex defs */
#include "${BASE_NAME}.h"   /* Include the generated header */

/*
 * A generic init function that might be expected by some Makefiles.
 * Customize if a specific init routine name is known from original defs.
 */
kern_return_t ${BASE_NAME}_init(void) {
    /* This is a stub, actual initialization would go here if needed */
    return KERN_SUCCESS;
}

/* Add more stub functions here if their names are known or can be parsed from .defs */
/* For example, if foo() was a routine in the .defs file:
kern_return_t foo(mach_port_t port, int data) {
    return KERN_FAILURE; // Indicate it's a stub
}
*/
STUB_USER

cat > "${SERVER_C_FILE}" << STUB_SERVER
/* Minimal server stub for ${BASE_NAME} generated by mig_stub_generator.sh */
#include <mach/kern_return.h>
#include <mach/mach_types.h>
#include <mach/message.h>
#include <mach/notify.h>
#include "${BASE_NAME}.h"   /* Include the generated header */

/*
 * A generic server function. The actual MIG output is much more complex.
 * This stub allows compilation to proceed but won't provide functionality.
 */
boolean_t ${BASE_NAME}_server(mach_msg_header_t *InHeadP,
                              mach_msg_header_t *OutHeadP) {
    /* This is a stub, actual request demultiplexing would go here */

    /* Set up a generic error reply for any message received */
    OutHeadP->msgh_bits = MACH_MSGH_BITS(MACH_MSGH_BITS_REMOTE(InHeadP->msgh_bits), 0);
    OutHeadP->msgh_size = sizeof(mach_msg_header_t); // Minimal reply size
    OutHeadP->msgh_remote_port = InHeadP->msgh_remote_port;
    OutHeadP->msgh_local_port = MACH_PORT_NULL;
    OutHeadP->msgh_id = InHeadP->msgh_id + 100; // Standard MIG reply ID offset

    // mach_msg_send_from_kernel_proper(OutHeadP); // This would be needed in real kernel

    return FALSE; // Indicates the message was not processed or an error.
                  // TRUE would mean it was handled and reply sent (or no reply needed).
}
STUB_SERVER

cat > "${HEADER_FILE}" << STUB_HEADER
/* Minimal header stub for ${BASE_NAME} generated by mig_stub_generator.sh */
#ifndef _${BASE_NAME}_H_
#define _${BASE_NAME}_H_

#include <mach/kern_return.h>
#include <mach/port.h> /* For mach_port_t */
#include <mach/message.h> /* For mach_msg_header_t */

/*
 * This would normally contain extern declarations for user-side functions
 * and potentially type definitions from the .defs file.
 */

/* Example extern declaration if routine 'foo' was in the .defs */
/* extern kern_return_t foo(mach_port_t port, int data); */

/* Generic init function declaration */
extern kern_return_t ${BASE_NAME}_init(void);

/* Server function prototype */
extern boolean_t ${BASE_NAME}_server(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

#endif /* _${BASE_NAME}_H_ */
STUB_HEADER
