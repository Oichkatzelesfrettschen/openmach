#!/bin/sh
#
# Mach Operating System
# Copyright (c) 1991,1990 Carnegie Mellon University
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
# CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
# ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# Carnegie Mellon requests users of this software to return to
#
#  Software Distribution Coordinator  or  Software.Distribution@CS.CMU.EDU
#  School of Computer Science
#  Carnegie Mellon University
#  Pittsburgh PA 15213-3890
#
# any improvements or extensions that they make and grant Carnegie Mellon
# the rights to redistribute these changes.
#

migcom=${MIGDIR-/usr/local/lib}/migcom
# cpp="${CPP-gcc}" # This should be just "gcc" or similar
# Use CC from environment, which should be clang-14
# Explicitly use clang-14 -E to avoid issues with CC not being propagated
cpp="clang-14 -E"

cppflags=
migflags=
files=

until [ $# -eq 0 ]
do
    case "$1" in
	-[qQvVtTrRsS] ) migflags="$migflags $1"; shift;;
	-i	) sawI=1; migflags="$migflags $1 $2"; shift; shift;;
	-user   ) user="$2"; if [ ! "${sawI-}" ]; then migflags="$migflags $1 $2"; fi; shift; shift;;
	-server ) server="$2"; migflags="$migflags $1 $2"; shift; shift;;
	-header ) header="$2"; migflags="$migflags $1 $2"; shift; shift;;
	-sheader ) sheader="$2"; migflags="$migflags $1 $2"; shift; shift;;
	-iheader ) iheader="$2"; migflags="$migflags $1 $2"; shift; shift;;
	-prefix | -subrprefix ) migflags="$migflags $1 $2"; shift; shift;;

	-MD ) sawMD=1; cppflags="$cppflags $1"; shift;;
	-imacros ) cppflags="$cppflags $1 $2"; shift; shift;;
	-cc) cpp="$2"; shift; shift;;
	-migcom) migcom="$2"; shift; shift;;
	-* ) cppflags="$cppflags $1"; shift;;
	* ) files="$files $1"; shift;;
    esac
done

for file in $files
do
    # Filter -MD for the main preprocessing pass
    actual_cppflags_no_md="`echo "$cppflags" | sed 's/-MD//g'`"
    # Also filter -nostdinc (as per previous test, though it didn't help)
    actual_cppflags_no_nostdinc="`echo "$actual_cppflags_no_md" | sed 's/-nostdinc//g'`"
    # TEST: Filter out -I-
    actual_cppflags_for_main_pass_stage1="`echo "$actual_cppflags_no_nostdinc" | sed 's/-I-//g'`"
    # KEEP -DMACH for this pass, remove other TEST filters for now for clarity
    actual_cppflags_for_main_pass="$actual_cppflags_for_main_pass_stage1"


    echo "DEBUG MIG.SH: Processing $file" >&2
    echo "DEBUG MIG.SH: Original cppflags for mig.sh: $cppflags" >&2
    echo "DEBUG MIG.SH: Actual cppflags for preprocessor (no -MD, no -nostdinc, no -I-): $actual_cppflags_for_main_pass" >&2
    # Filter -MD for the main preprocessing pass, also filter -nostdinc for testing
    actual_cppflags_no_md="`echo "$cppflags" | sed 's/-MD//g'`"
    # actual_cppflags_for_main_pass is now set above. The original line was:
    # actual_cppflags_for_main_pass="`echo "$actual_cppflags_no_md" | sed 's/-nostdinc//g'`"

    echo "DEBUG MIG.SH: Processing $file" >&2
    echo "DEBUG MIG.SH: Original cppflags for mig.sh: $cppflags" >&2
    echo "DEBUG MIG.SH: Actual cppflags for preprocessor (Final for $cpp -E): $actual_cppflags_for_main_pass" >&2
    echo "DEBUG MIG.SH: Migcom flags: $migflags" >&2
    echo "DEBUG MIG.SH: Preprocessor command to be run: $cpp $actual_cppflags_for_main_pass \"$file\"" >&2

    rm -f /tmp/mig_cpp_errors.log

    exit_status=0
    # Generic handling for all files: save preprocessed output
    base_name_for_log="`basename "$file" .pres`"
    preprocessed_output_file="/tmp/${base_name_for_log}_preprocessed.txt"
    echo "DEBUG MIG.SH: Preprocessed output will be saved to $preprocessed_output_file" >&2
    rm -f "$preprocessed_output_file"

    # 1. Preprocess and save to temp file
    cat "$file" | $cpp $actual_cppflags_for_main_pass - 2>>/tmp/mig_cpp_errors.log | tee "$preprocessed_output_file"
    # We don't care about exit status of tee itself, but rather if the file was created.
    # migcom's exit status is what matters later.

    # 2. Conditionally cat preprocessed content to stderr for debugging
    if [ "$file" = "/app/libmach/mach_host.pres" ] || \
       [ "$file" = "/app/libmach/mach_interface.pres" ] || \
       [ "$file" = "/app/libmach/default_pager.pres" ] || \
       [ "$file" = "/app/libmach/bootstrap.pres" ] || \
       [ "$file" = "/app/libmach/mach_debug.pres" ]; then
        echo "---- START content of $preprocessed_output_file for $file ----" >&2
        cat "$preprocessed_output_file" >&2
        echo "---- END content of $preprocessed_output_file for $file ----" >&2
    fi

    # 3. Pipe the preprocessed file to migcom
    if [ ! -f "$preprocessed_output_file" ]; then
        echo "DEBUG MIG.SH: ERROR - Preprocessed file $preprocessed_output_file was NOT created. Skipping migcom." >&2
        exit_status=1 # Indicate failure
    else
        cat "$preprocessed_output_file" | "$migcom" $migflags
        exit_status=$? # $? is from migcom here
    fi

    # 4. Debug statements about the preprocessed file
    if [ -f "$preprocessed_output_file" ]; then
        actual_size=$(stat -c%s "$preprocessed_output_file" 2>/dev/null || echo 0)
        if [ ! -s "$preprocessed_output_file" ] && [ $exit_status -eq 0 ]; then # File is empty but migcom succeeded (unlikely for real work)
             echo "DEBUG MIG.SH: $preprocessed_output_file IS EMPTY (size $actual_size), but migcom pipe status was 0." >&2
        elif [ -s "$preprocessed_output_file" ]; then # File is not empty
             echo "DEBUG MIG.SH: $preprocessed_output_file is NOT empty (size $actual_size)." >&2
        else # File is empty and migcom likely failed or did nothing
             echo "DEBUG MIG.SH: $preprocessed_output_file IS EMPTY (size $actual_size, migcom pipe status $exit_status)." >&2
        fi
        # echo "DEBUG MIG.SH: $preprocessed_output_file was created (size: $actual_size)." >&2 # Redundant with above
    else
        # This case should be caught by the ! -f check above
        echo "DEBUG MIG.SH: $preprocessed_output_file was NOT created (this should not happen if previous checks passed)." >&2
    fi

    if [ -s /tmp/mig_cpp_errors.log ]; then
        echo "DEBUG MIG.SH: Errors from C preprocessor ($cpp -E) for $file:" >&2
        cat /tmp/mig_cpp_errors.log >&2
    fi

    if [ $exit_status -ne 0 ]; then
        echo "DEBUG MIG.SH: migcom or pipe failed for $file with status $exit_status." >&2
    fi

    # Dependency file generation

    if [ $sawMD ]; then
        base="`basename "$file"|sed 's%[.][^.]*$%%'`"
        deps=
        rheader="${header-${base}.h}"
        if [ "$rheader" != /dev/null ]; then deps="$deps $rheader"; fi
        ruser="${user-${base}User.c}"
        if [ "$ruser" != /dev/null ]; then
            if [ $sawI ]; then
                for un in $ruser; do deps="$deps $un"; done
            else
                deps="$deps $ruser"
            fi
        fi
        rserver="${server-${base}Server.c}"
        if [ "$rserver" != /dev/null ]; then deps="$deps $rserver"; fi
        rsheader="${sheader-/dev/null}"
        if [ "$rsheader" != /dev/null ]; then deps="$deps $rsheader"; fi
        riheader="${iheader-/dev/null}"
        if [ "$riheader" != /dev/null ]; then deps="$deps $riheader"; fi

        echo "DEBUG MIG.SH: Generating dependency file ${base}.d for $file (using original cppflags: $cppflags)" >&2
        rm -f /tmp/mig_dep_errors.log

        # Use original cppflags for .d file generation, which includes -MD
        # Also use $CC -E for consistency here for .d file generation
        # Filter out -I- from cppflags for .d generation as clang doesn't like it
        cppflags_for_d_gen="`echo "$cppflags" | sed 's/-I-//g'`"
        echo "DEBUG MIG.SH: cppflags for .d generation (no -I-): $cppflags_for_d_gen" >&2
        $cpp $cppflags_for_d_gen "$file" > /dev/null 2>/tmp/mig_dep_errors.log # Input via filename for -MD
        if [ -s /tmp/mig_dep_errors.log ]; then
            echo "DEBUG MIG.SH: Errors during .d generation for $file (using $cpp $cppflags_for_d_gen):" >&2
            cat /tmp/mig_dep_errors.log >&2
        fi

        if [ -f "${base}.d" ]; then
            sed 's%^[^:]*:%'"${deps}"':%' <"${base}.d" >"${base}-mig.d"
            rm -f ${base}.d
            echo "DEBUG MIG.SH: Processed dependency file ${base}.d -> ${base}-mig.d" >&2
        else
            echo "DEBUG MIG.SH: Dependency file ${base}.d was NOT created for $file (check /tmp/mig_dep_errors.log)." >&2
            echo "${deps}: # ${base}.d not generated by mig.sh" > "${base}-mig.d"
        fi
    fi

    if [ $exit_status -ne 0 ]; then
        exit $exit_status
    fi
done

exit 0
